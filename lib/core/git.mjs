import { exec } from '../utils/exec.mjs';

/**
 * Create PR with detailed description
 * @param {string} cwd
 * @param {string} branchName
 * @param {string[]} changes
 * @param {string[]} packs
 * @returns {Promise<void>}
 */
export async function createPrIfRequested(cwd, branchName, changes, packs) {
    const ghToken = process.env.GITHUB_TOKEN || process.env.GH_TOKEN || null;

    await exec('git', ['checkout', '-b', branchName], { cwd });
    await exec('git', ['add', '.'], { cwd });
    await exec('git', ['commit', '-m', 'chore(oss): apply oss-doctor recommendations'], { cwd });
    await exec('git', ['push', '-u', 'origin', branchName], { cwd });

    if (!ghToken) {
        // eslint-disable-next-line no-console
        console.log('');
        // eslint-disable-next-line no-console
        console.log('‚ö†Ô∏è  No GITHUB_TOKEN detected.');
        // eslint-disable-next-line no-console
        console.log('Please open PR manually or set GITHUB_TOKEN environment variable.');

        return;
    }

    // Build PR body
    const body = buildPrBody(changes, packs);

    try {
        await exec('gh', ['pr', 'create', '--title', 'chore(oss): apply oss-doctor recommendations', '--body', body], {
            cwd,
            env: { ...process.env, GITHUB_TOKEN: ghToken },
        });

        // eslint-disable-next-line no-console
        console.log('‚úÖ Pull request created successfully');

        return;
    } catch (err) {
        // Fallback to API
        try {
            await exec(
                'gh',
                [
                    'api',
                    'repos/:owner/:repo/pulls',
                    '-f',
                    `head=${branchName}`,
                    '-f',
                    'base=main',
                    '-f',
                    'title=chore(oss): apply oss-doctor recommendations',
                    '-f',
                    `body=${body}`,
                ],
                { cwd, env: { ...process.env, GITHUB_TOKEN: ghToken } },
            );

            // eslint-disable-next-line no-console
            console.log('‚úÖ Pull request created successfully');
        } catch (apiErr) {
            const message =
                apiErr && typeof apiErr === 'object' && 'message' in apiErr ? apiErr.message : 'Unknown error';

            // eslint-disable-next-line no-console
            console.error('‚ùå Failed to create PR:', message);
        }
    }
}

/**
 * Build PR body with changes table
 * @param {string[]} changes
 * @param {string[]} packs
 * @returns {string}
 */
function buildPrBody(changes, packs) {
    const lines = [];

    lines.push('## Summary');
    lines.push('');
    lines.push(`Applied oss-doctor recommendations for packs: ${packs.join(', ')}`);
    lines.push('');
    lines.push('## Changes');
    lines.push('');

    for (const change of changes) {
        lines.push(`- ${change}`);
    }

    lines.push('');
    lines.push('---');
    lines.push('');
    lines.push('ü§ñ Generated by [oss-doctor](https://github.com/sw1tch3roo/oss-doctor)');

    return lines.join('\n');
}
